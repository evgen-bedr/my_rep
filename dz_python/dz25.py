# Напишите программу, которая принимает список слов и возвращает список, содержащий только анаграммы.
# Анаграммы - это слова, составленные из одних и тех же букв, но в разном порядке.
# Создайте функцию anagrams, которая принимает список слов в качестве аргумента и возвращает список анаграмм.
# Используйте множества и сортировку букв в слове для проверки на анаграмму. Выведите результат на экран.
#
# Пример переданного списка слов:
# ['cat', 'dog', 'tac', 'god', 'act']
# Пример вывода:
# Анаграммы: ['dog', 'god'], ['cat', 'tac', 'act']

def anagrams(word_list):
    my_dict = {}


    for i in word_list:
        abc = ''.join(sorted(i))
        if abc in my_dict:
            my_dict[abc].append(i)
        else:
            my_dict[abc] = [i]

    return list(my_dict.values())


user_list = ['cat', 'dog', 'tac', 'god', 'act']
print('Анаграммы: ', anagrams(user_list))



# Напишите функцию is_subset, которая принимает два множества set1 и set2 и проверяет, является ли set1 подмножеством set2.
# Функция должна возвращать True, если все элементы из set1 содержатся в set2, и False в противном случае.
# Функция должна быть реализована без использования встроенных методов issubset или <=.
#
# Пример множеств
# {1, 2, 3}
# {1, 2, 3, 4, 5}
# Пример вывода:
# True

def is_subset(set1, set2):
    podmn = True if set1 - set2 == set() else False
    return podmn


dict1 = {1, 2, 3}
dict2 = {1, 2, 3, 4, 5}

print(is_subset(dict1, dict2))
